name: CMake

on:
  pull_request:
  push:
    branches: [ "main" ]
    
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        sudo apt-get update
        sudo apt-get install cmake mesa-common-dev libxxf86vm-dev freeglut3-dev libxext-dev libxcursor-dev portaudio19-dev libsndfile1-dev libopenxr-dev
        cd src
        sed -i 's/#add_definitions(-DFOR_DEB)/add_definitions(-DFOR_DEB)/g' CMakeLists.txt
        cat CMakeLists.txt
        cd ../bin
        cmake ../src

    - name: Build
      # Build your program with the given configuration
      run: |
        cd bin
        make
        ./bridgecommand --version
        cd ../../
        ls -l
        mkdir -p AppDir/usr/bin
        cp -r bc/bin AppDir/usr
        #can clean up AppDir/usr/bin first if we like
        rm -r AppDir/usr/bin/BridgeCommand.app
        rm -r AppDir/usr/bin/CMakeFiles
        rm -r AppDir/usr/bin/controller
        rm -r AppDir/usr/bin/createDeb
        rm -r AppDir/usr/bin/editor
        rm -r AppDir/usr/bin/iniEditor
        rm -r AppDir/usr/bin/launcher
        rm -r AppDir/usr/bin/libs
        rm -r AppDir/usr/bin/multiplayerHub
        rm -r AppDir/usr/bin/repeater
        rm -r AppDir/usr/bin/*.exe
        rm -r AppDir/usr/bin/*.dll
        #get our preconfiged files
        git clone --depth 1 https://github.com/vpelss/bridgecommand_AppImage.git
        #place AppRun script in AppDir
        cp bridgecommand_AppImage/AppRun AppDir
        #place bridgecommand.desktop in AppDir
        cp bridgecommand_AppImage/bridgecommand.desktop AppDir
        #place bridgecommand.png in AppDir
        cp bridgecommand_AppImage/bridgecommand.png AppDir
        #set permissions
        chmod +x AppDir/AppRun
        chmod +x AppDir/usr/bin/bridgecommand*
        chmod +x AppDir/bridgecommand.desktop
        # 3. Get linuxdeploy and create our AppImage file
        sudo apt install libfuse2
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        #run linuxdeploy and fix up generate an AppDir (add lib) and build AppImage 
        ARCH=x86_64 ./linuxdeploy-x86_64.AppImage -v 1 --appdir AppDir --output appimage
        chmod 777 Bridge_Command-x86_64.AppImage
        #cd createDeb
        #./buildDeb
      
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bc_AppImage
        path: Bridge_Command-x86_64.AppImage 
        #path: bin/createDeb/bridgecommand.deb
